
WB55_Nucleo_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003588  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080036c4  080036c4  000136c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080037cc  080037cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  080037d4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b0  20000010  080037e0  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000c0  080037e0  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e474  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001edf  00000000  00000000  0002e4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001198  00000000  00000000  00030398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010f0  00000000  00000000  00031530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00020b67  00000000  00000000  00032620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000c8ad  00000000  00000000  00053187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d3eaa  00000000  00000000  0005fa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001338de  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000490c  00000000  00000000  00133934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080036ac 	.word	0x080036ac

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080036ac 	.word	0x080036ac

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4013      	ands	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000498:	68fb      	ldr	r3, [r7, #12]
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint8_t *data = "Testing \n";
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <main+0x3c>)
 80004b0:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b2:	f000 fa55 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b6:	f000 f819 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ba:	f000 f8d5 	bl	8000668 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004be:	f000 f887 	bl	80005d0 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_UART_Transmit(&huart1, data, sizeof(data), 100) != HAL_OK)
 80004c2:	2364      	movs	r3, #100	; 0x64
 80004c4:	2204      	movs	r2, #4
 80004c6:	6879      	ldr	r1, [r7, #4]
 80004c8:	4807      	ldr	r0, [pc, #28]	; (80004e8 <main+0x40>)
 80004ca:	f002 fbb7 	bl	8002c3c <HAL_UART_Transmit>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <main+0x30>
		  Error_Handler();
 80004d4:	f000 f922 	bl	800071c <Error_Handler>

	  HAL_Delay(500);
 80004d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004dc:	f000 fac6 	bl	8000a6c <HAL_Delay>
	  if(HAL_UART_Transmit(&huart1, data, sizeof(data), 100) != HAL_OK)
 80004e0:	e7ef      	b.n	80004c2 <main+0x1a>
 80004e2:	bf00      	nop
 80004e4:	080036c4 	.word	0x080036c4
 80004e8:	2000002c 	.word	0x2000002c

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b0ae      	sub	sp, #184	; 0xb8
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004f6:	2248      	movs	r2, #72	; 0x48
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f003 f8ce 	bl	800369c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
 8000510:	615a      	str	r2, [r3, #20]
 8000512:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2250      	movs	r2, #80	; 0x50
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 f8be 	bl	800369c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	4b2a      	ldr	r3, [pc, #168]	; (80005cc <SystemClock_Config+0xe0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000528:	4a28      	ldr	r2, [pc, #160]	; (80005cc <SystemClock_Config+0xe0>)
 800052a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	4b26      	ldr	r3, [pc, #152]	; (80005cc <SystemClock_Config+0xe0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800053c:	2303      	movs	r3, #3
 800053e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000544:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800054a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054c:	2340      	movs	r3, #64	; 0x40
 800054e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000552:	2300      	movs	r3, #0
 8000554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800055c:	4618      	mov	r0, r3
 800055e:	f001 f8a9 	bl	80016b4 <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000568:	f000 f8d8 	bl	800071c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800056c:	236f      	movs	r3, #111	; 0x6f
 800056e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000570:	2302      	movs	r3, #2
 8000572:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000588:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800058c:	2101      	movs	r1, #1
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fc1c 	bl	8001dcc <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800059a:	f000 f8bf 	bl	800071c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1;
 800059e:	f242 0301 	movw	r3, #8193	; 0x2001
 80005a2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 f84b 	bl	800264e <HAL_RCCEx_PeriphCLKConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80005be:	f000 f8ad 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80005c2:	bf00      	nop
 80005c4:	37b8      	adds	r7, #184	; 0xb8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	58000400 	.word	0x58000400

080005d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_USART1_UART_Init+0x90>)
 80005d6:	4a23      	ldr	r2, [pc, #140]	; (8000664 <MX_USART1_UART_Init+0x94>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <MX_USART1_UART_Init+0x90>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_USART1_UART_Init+0x90>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_USART1_UART_Init+0x90>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_USART1_UART_Init+0x90>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_USART1_UART_Init+0x90>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_USART1_UART_Init+0x90>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_USART1_UART_Init+0x90>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_USART1_UART_Init+0x90>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_USART1_UART_Init+0x90>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_USART1_UART_Init+0x90>)
 8000614:	2200      	movs	r2, #0
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000618:	4811      	ldr	r0, [pc, #68]	; (8000660 <MX_USART1_UART_Init+0x90>)
 800061a:	f002 fabf 	bl	8002b9c <HAL_UART_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000624:	f000 f87a 	bl	800071c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000628:	2100      	movs	r1, #0
 800062a:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_USART1_UART_Init+0x90>)
 800062c:	f002 ff48 	bl	80034c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000636:	f000 f871 	bl	800071c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <MX_USART1_UART_Init+0x90>)
 800063e:	f002 ff7d 	bl	800353c <HAL_UARTEx_SetRxFifoThreshold>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000648:	f000 f868 	bl	800071c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_USART1_UART_Init+0x90>)
 800064e:	f002 fefe 	bl	800344e <HAL_UARTEx_DisableFifoMode>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000658:	f000 f860 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000002c 	.word	0x2000002c
 8000664:	40013800 	.word	0x40013800

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067c:	2004      	movs	r0, #4
 800067e:	f7ff fef9 	bl	8000474 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	2002      	movs	r0, #2
 8000684:	f7ff fef6 	bl	8000474 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	2001      	movs	r0, #1
 800068a:	f7ff fef3 	bl	8000474 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	2008      	movs	r0, #8
 8000690:	f7ff fef0 	bl	8000474 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2123      	movs	r1, #35	; 0x23
 8000698:	481d      	ldr	r0, [pc, #116]	; (8000710 <MX_GPIO_Init+0xa8>)
 800069a:	f000 fc5f 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800069e:	2310      	movs	r3, #16
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4819      	ldr	r0, [pc, #100]	; (8000714 <MX_GPIO_Init+0xac>)
 80006b0:	f000 fae4 	bl	8000c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80006b4:	2323      	movs	r3, #35	; 0x23
 80006b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	4811      	ldr	r0, [pc, #68]	; (8000710 <MX_GPIO_Init+0xa8>)
 80006ca:	f000 fad7 	bl	8000c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80006e0:	230a      	movs	r3, #10
 80006e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f000 fac6 	bl	8000c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_GPIO_Init+0xb0>)
 8000702:	f000 fabb 	bl	8000c7c <HAL_GPIO_Init>

}
 8000706:	bf00      	nop
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	48000400 	.word	0x48000400
 8000714:	48000800 	.word	0x48000800
 8000718:	48000c00 	.word	0x48000c00

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>

08000726 <LL_AHB2_GRP1_EnableClock>:
{
 8000726:	b480      	push	{r7}
 8000728:	b085      	sub	sp, #20
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800072e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4313      	orrs	r3, r2
 800073c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800073e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4013      	ands	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000764:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4313      	orrs	r3, r2
 800076e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000774:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4013      	ands	r3, r2
 800077a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800077c:	68fb      	ldr	r3, [r7, #12]
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_UART_MspInit+0x58>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d116      	bne.n	80007e8 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007be:	f7ff ffcb 	bl	8000758 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2002      	movs	r0, #2
 80007c4:	f7ff ffaf 	bl	8000726 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80007c8:	23c0      	movs	r3, #192	; 0xc0
 80007ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007d8:	2307      	movs	r3, #7
 80007da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <HAL_UART_MspInit+0x5c>)
 80007e4:	f000 fa4a 	bl	8000c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40013800 	.word	0x40013800
 80007f4:	48000400 	.word	0x48000400

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f8e6 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <SystemInit+0x98>)
 8000852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000856:	4a23      	ldr	r2, [pc, #140]	; (80008e4 <SystemInit+0x98>)
 8000858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800085c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000874:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000878:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800087a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <SystemInit+0x9c>)
 8000886:	4013      	ands	r3, r2
 8000888:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000896:	f023 0305 	bic.w	r3, r3, #5
 800089a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800089e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80008a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008aa:	f023 0301 	bic.w	r3, r3, #1
 80008ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80008b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b6:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <SystemInit+0xa0>)
 80008b8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80008ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <SystemInit+0xa0>)
 80008c0:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00
 80008e8:	faf6fefb 	.word	0xfaf6fefb
 80008ec:	22041000 	.word	0x22041000

080008f0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80008f0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f4:	3304      	adds	r3, #4

080008f6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80008fa:	d3f9      	bcc.n	80008f0 <CopyDataInit>
  bx lr
 80008fc:	4770      	bx	lr

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80008fe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000900:	3004      	adds	r0, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000902:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>
  bx lr
 8000906:	4770      	bx	lr

08000908 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800090a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800090c:	f7ff ff9e 	bl	800084c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <LoopForever+0x8>)
 8000912:	490c      	ldr	r1, [pc, #48]	; (8000944 <LoopForever+0xc>)
 8000914:	4a0c      	ldr	r2, [pc, #48]	; (8000948 <LoopForever+0x10>)
 8000916:	2300      	movs	r3, #0
 8000918:	f7ff ffed 	bl	80008f6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800091c:	480b      	ldr	r0, [pc, #44]	; (800094c <LoopForever+0x14>)
 800091e:	490c      	ldr	r1, [pc, #48]	; (8000950 <LoopForever+0x18>)
 8000920:	2300      	movs	r3, #0
 8000922:	f7ff ffee 	bl	8000902 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <LoopForever+0x1c>)
 8000928:	490b      	ldr	r1, [pc, #44]	; (8000958 <LoopForever+0x20>)
 800092a:	2300      	movs	r3, #0
 800092c:	f7ff ffe9 	bl	8000902 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000930:	f002 fe90 	bl	8003654 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000934:	f7ff fdb8 	bl	80004a8 <main>

08000938 <LoopForever>:

LoopForever:
  b LoopForever
 8000938:	e7fe      	b.n	8000938 <LoopForever>
 800093a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800093c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000940:	20000004 	.word	0x20000004
 8000944:	20000010 	.word	0x20000010
 8000948:	080037d4 	.word	0x080037d4
  INIT_BSS _sbss, _ebss
 800094c:	20000010 	.word	0x20000010
 8000950:	200000c0 	.word	0x200000c0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000954:	20030000 	.word	0x20030000
 8000958:	20030000 	.word	0x20030000

0800095c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_IRQHandler>
	...

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_Init+0x3c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <HAL_Init+0x3c>)
 8000970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000974:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000976:	2003      	movs	r0, #3
 8000978:	f000 f94e 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097c:	2000      	movs	r0, #0
 800097e:	f000 f80f 	bl	80009a0 <HAL_InitTick>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d002      	beq.n	800098e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	e001      	b.n	8000992 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800098e:	f7ff fefc 	bl	800078a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000992:	79fb      	ldrb	r3, [r7, #7]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	58004000 	.word	0x58004000

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_InitTick+0x6c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d024      	beq.n	80009fe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009b4:	f001 fbb6 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 80009b8:	4602      	mov	r2, r0
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_InitTick+0x6c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f948 	bl	8000c62 <HAL_SYSTICK_Config>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10f      	bne.n	80009f8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b0f      	cmp	r3, #15
 80009dc:	d809      	bhi.n	80009f2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009de:	2200      	movs	r2, #0
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	f04f 30ff 	mov.w	r0, #4294967295
 80009e6:	f000 f922 	bl	8000c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <HAL_InitTick+0x70>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	e007      	b.n	8000a02 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	e004      	b.n	8000a02 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	e001      	b.n	8000a02 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000000c 	.word	0x2000000c
 8000a10:	20000008 	.word	0x20000008

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	2000000c 	.word	0x2000000c
 8000a38:	200000bc 	.word	0x200000bc

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	200000bc 	.word	0x200000bc

08000a54 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTickPrio+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffe2 	bl	8000a3c <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffd2 	bl	8000a3c <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
    {
    }
  }
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000000c 	.word	0x2000000c

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff47 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff5e 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff90 	bl	8000b6c <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5f 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffb2 	bl	8000bd4 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8a:	e14c      	b.n	8000f26 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	2101      	movs	r1, #1
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 813e 	beq.w	8000f20 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d00b      	beq.n	8000cc4 <HAL_GPIO_Init+0x48>
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d007      	beq.n	8000cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cb8:	2b11      	cmp	r3, #17
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b12      	cmp	r3, #18
 8000cc2:	d130      	bne.n	8000d26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	091b      	lsrs	r3, r3, #4
 8000d10:	f003 0201 	and.w	r2, r3, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0xea>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d123      	bne.n	8000dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	08da      	lsrs	r2, r3, #3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	691a      	ldr	r2, [r3, #16]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	08da      	lsrs	r2, r3, #3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3208      	adds	r2, #8
 8000da8:	6939      	ldr	r1, [r7, #16]
 8000daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2203      	movs	r2, #3
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0203 	and.w	r2, r3, #3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8098 	beq.w	8000f20 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000df0:	4a54      	ldr	r2, [pc, #336]	; (8000f44 <HAL_GPIO_Init+0x2c8>)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e1a:	d019      	beq.n	8000e50 <HAL_GPIO_Init+0x1d4>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a4a      	ldr	r2, [pc, #296]	; (8000f48 <HAL_GPIO_Init+0x2cc>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d013      	beq.n	8000e4c <HAL_GPIO_Init+0x1d0>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a49      	ldr	r2, [pc, #292]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d00d      	beq.n	8000e48 <HAL_GPIO_Init+0x1cc>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a48      	ldr	r2, [pc, #288]	; (8000f50 <HAL_GPIO_Init+0x2d4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d007      	beq.n	8000e44 <HAL_GPIO_Init+0x1c8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a47      	ldr	r2, [pc, #284]	; (8000f54 <HAL_GPIO_Init+0x2d8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d101      	bne.n	8000e40 <HAL_GPIO_Init+0x1c4>
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	e008      	b.n	8000e52 <HAL_GPIO_Init+0x1d6>
 8000e40:	2307      	movs	r3, #7
 8000e42:	e006      	b.n	8000e52 <HAL_GPIO_Init+0x1d6>
 8000e44:	2303      	movs	r3, #3
 8000e46:	e004      	b.n	8000e52 <HAL_GPIO_Init+0x1d6>
 8000e48:	2302      	movs	r3, #2
 8000e4a:	e002      	b.n	8000e52 <HAL_GPIO_Init+0x1d6>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <HAL_GPIO_Init+0x1d6>
 8000e50:	2300      	movs	r3, #0
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	f002 0203 	and.w	r2, r2, #3
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	4093      	lsls	r3, r2
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e62:	4938      	ldr	r1, [pc, #224]	; (8000f44 <HAL_GPIO_Init+0x2c8>)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e70:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <HAL_GPIO_Init+0x2dc>)
 8000e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e96:	4a30      	ldr	r2, [pc, #192]	; (8000f58 <HAL_GPIO_Init+0x2dc>)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <HAL_GPIO_Init+0x2dc>)
 8000ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ec4:	4a24      	ldr	r2, [pc, #144]	; (8000f58 <HAL_GPIO_Init+0x2dc>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <HAL_GPIO_Init+0x2dc>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ef0:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_GPIO_Init+0x2dc>)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_GPIO_Init+0x2dc>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_GPIO_Init+0x2dc>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3301      	adds	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f47f aeab 	bne.w	8000c8c <HAL_GPIO_Init+0x10>
  }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	371c      	adds	r7, #28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40010000 	.word	0x40010000
 8000f48:	48000400 	.word	0x48000400
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	48000c00 	.word	0x48000c00
 8000f54:	48001000 	.word	0x48001000
 8000f58:	58000800 	.word	0x58000800

08000f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f78:	e002      	b.n	8000f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	58000400 	.word	0x58000400

08000fac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	58000400 	.word	0x58000400

08000fc8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000fda:	d101      	bne.n	8000fe0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800100e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800102c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800103a:	d101      	bne.n	8001040 <LL_RCC_HSE_IsReady+0x18>
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <LL_RCC_HSE_IsReady+0x1a>
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800106e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800107c:	6013      	str	r3, [r2, #0]
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800108c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800109a:	d101      	bne.n	80010a0 <LL_RCC_HSI_IsReady+0x18>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <LL_RCC_HSI_IsReady+0x1a>
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80010b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	061b      	lsls	r3, r3, #24
 80010c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80010da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001108:	f023 0301 	bic.w	r3, r3, #1
 800110c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800111e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b02      	cmp	r3, #2
 800112c:	d101      	bne.n	8001132 <LL_RCC_HSI48_IsReady+0x18>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <LL_RCC_HSI48_IsReady+0x1a>
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800114a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800116c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800118e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80011a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d101      	bne.n	80011de <LL_RCC_LSE_IsReady+0x18>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <LL_RCC_LSE_IsReady+0x1a>
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80011ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b02      	cmp	r3, #2
 8001240:	d101      	bne.n	8001246 <LL_RCC_LSI1_IsReady+0x18>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <LL_RCC_LSI1_IsReady+0x1a>
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d101      	bne.n	80012ae <LL_RCC_LSI2_IsReady+0x18>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <LL_RCC_LSI2_IsReady+0x1a>
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80012c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d6:	4313      	orrs	r3, r2
 80012d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80012ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800130a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	6013      	str	r3, [r2, #0]
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b02      	cmp	r3, #2
 8001334:	d101      	bne.n	800133a <LL_RCC_MSI_IsReady+0x16>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <LL_RCC_MSI_IsReady+0x18>
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800134e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800137e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2bb0      	cmp	r3, #176	; 0xb0
 8001384:	d901      	bls.n	800138a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001386:	23b0      	movs	r3, #176	; 0xb0
 8001388:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800138a:	687b      	ldr	r3, [r7, #4]
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013b2:	4313      	orrs	r3, r2
 80013b4:	604b      	str	r3, [r1, #4]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f023 0203 	bic.w	r2, r3, #3
 80013d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4313      	orrs	r3, r2
 80013dc:	608b      	str	r3, [r1, #8]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 030c 	and.w	r3, r3, #12
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800140a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4313      	orrs	r3, r2
 800141c:	608b      	str	r3, [r1, #8]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001436:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800143a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4313      	orrs	r3, r2
 8001446:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800145e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001462:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001466:	f023 020f 	bic.w	r2, r3, #15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001472:	4313      	orrs	r3, r2
 8001474:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800148c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	608b      	str	r3, [r1, #8]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	608b      	str	r3, [r1, #8]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80014f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800153c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001568:	6013      	str	r3, [r2, #0]
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001586:	d101      	bne.n	800158c <LL_RCC_PLL_IsReady+0x18>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <LL_RCC_PLL_IsReady+0x1a>
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800159c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80015b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f003 0303 	and.w	r3, r3, #3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80015fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d101      	bne.n	8001612 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001626:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001632:	d101      	bne.n	8001638 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001658:	d101      	bne.n	800165e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800167c:	d101      	bne.n	8001682 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016a0:	d101      	bne.n	80016a6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b08d      	sub	sp, #52	; 0x34
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e37e      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8092 	beq.w	80017f8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d4:	f7ff fe89 	bl	80013ea <LL_RCC_GetSysClkSource>
 80016d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016da:	f7ff ff82 	bl	80015e2 <LL_RCC_PLL_GetMainSource>
 80016de:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x3e>
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	2b0c      	cmp	r3, #12
 80016ea:	d14c      	bne.n	8001786 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d149      	bne.n	8001786 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f2:	f7ff fe17 	bl	8001324 <LL_RCC_MSI_IsReady>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_OscConfig+0x54>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e35d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800170c:	f7ff fe2f 	bl	800136e <LL_RCC_MSI_GetRange>
 8001710:	4603      	mov	r3, r0
 8001712:	429c      	cmp	r4, r3
 8001714:	d914      	bls.n	8001740 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fd42 	bl	80021a4 <RCC_SetFlashLatencyFromMSIRange>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e34c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe09 	bl	8001346 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fe2d 	bl	8001398 <LL_RCC_MSI_SetCalibTrimming>
 800173e:	e013      	b.n	8001768 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fdfe 	bl	8001346 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fe22 	bl	8001398 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	4618      	mov	r0, r3
 800175a:	f000 fd23 	bl	80021a4 <RCC_SetFlashLatencyFromMSIRange>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e32d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001768:	f000 fcdc 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 800176c:	4603      	mov	r3, r0
 800176e:	4ab3      	ldr	r2, [pc, #716]	; (8001a3c <HAL_RCC_OscConfig+0x388>)
 8001770:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001772:	4bb3      	ldr	r3, [pc, #716]	; (8001a40 <HAL_RCC_OscConfig+0x38c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff f912 	bl	80009a0 <HAL_InitTick>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d039      	beq.n	80017f6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e31e      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01e      	beq.n	80017cc <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800178e:	f7ff fdab 	bl	80012e8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001792:	f7ff f953 	bl	8000a3c <HAL_GetTick>
 8001796:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179a:	f7ff f94f 	bl	8000a3c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e30b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80017ac:	f7ff fdba 	bl	8001324 <LL_RCC_MSI_IsReady>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f1      	beq.n	800179a <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fdc3 	bl	8001346 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fde7 	bl	8001398 <LL_RCC_MSI_SetCalibTrimming>
 80017ca:	e015      	b.n	80017f8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017cc:	f7ff fd9b 	bl	8001306 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017d0:	f7ff f934 	bl	8000a3c <HAL_GetTick>
 80017d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d8:	f7ff f930 	bl	8000a3c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e2ec      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80017ea:	f7ff fd9b 	bl	8001324 <LL_RCC_MSI_IsReady>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f1      	bne.n	80017d8 <HAL_RCC_OscConfig+0x124>
 80017f4:	e000      	b.n	80017f8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d04e      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001804:	f7ff fdf1 	bl	80013ea <LL_RCC_GetSysClkSource>
 8001808:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800180a:	f7ff feea 	bl	80015e2 <LL_RCC_PLL_GetMainSource>
 800180e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	2b08      	cmp	r3, #8
 8001814:	d005      	beq.n	8001822 <HAL_RCC_OscConfig+0x16e>
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	2b0c      	cmp	r3, #12
 800181a:	d10d      	bne.n	8001838 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d10a      	bne.n	8001838 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	f7ff fc01 	bl	8001028 <LL_RCC_HSE_IsReady>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d039      	beq.n	80018a0 <HAL_RCC_OscConfig+0x1ec>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d135      	bne.n	80018a0 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e2c5      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d102      	bne.n	8001848 <HAL_RCC_OscConfig+0x194>
 8001842:	f7ff fbd3 	bl	8000fec <LL_RCC_HSE_Enable>
 8001846:	e001      	b.n	800184c <HAL_RCC_OscConfig+0x198>
 8001848:	f7ff fbdf 	bl	800100a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d012      	beq.n	800187a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff f8f2 	bl	8000a3c <HAL_GetTick>
 8001858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff f8ee 	bl	8000a3c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e2aa      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800186e:	f7ff fbdb 	bl	8001028 <LL_RCC_HSE_IsReady>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f1      	beq.n	800185c <HAL_RCC_OscConfig+0x1a8>
 8001878:	e013      	b.n	80018a2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff f8df 	bl	8000a3c <HAL_GetTick>
 800187e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001882:	f7ff f8db 	bl	8000a3c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b64      	cmp	r3, #100	; 0x64
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e297      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001894:	f7ff fbc8 	bl	8001028 <LL_RCC_HSE_IsReady>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f1      	bne.n	8001882 <HAL_RCC_OscConfig+0x1ce>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d051      	beq.n	8001952 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ae:	f7ff fd9c 	bl	80013ea <LL_RCC_GetSysClkSource>
 80018b2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b4:	f7ff fe95 	bl	80015e2 <LL_RCC_PLL_GetMainSource>
 80018b8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x218>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d113      	bne.n	80018ee <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d110      	bne.n	80018ee <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018cc:	f7ff fbdc 	bl	8001088 <LL_RCC_HSI_IsReady>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_RCC_OscConfig+0x22e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e270      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fbe0 	bl	80010ac <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ec:	e031      	b.n	8001952 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d019      	beq.n	800192a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f6:	f7ff fba9 	bl	800104c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff f89f 	bl	8000a3c <HAL_GetTick>
 80018fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff f89b 	bl	8000a3c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e257      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001914:	f7ff fbb8 	bl	8001088 <LL_RCC_HSI_IsReady>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f1      	beq.n	8001902 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fbc2 	bl	80010ac <LL_RCC_HSI_SetCalibTrimming>
 8001928:	e013      	b.n	8001952 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192a:	f7ff fb9e 	bl	800106a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192e:	f7ff f885 	bl	8000a3c <HAL_GetTick>
 8001932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001936:	f7ff f881 	bl	8000a3c <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e23d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001948:	f7ff fb9e 	bl	8001088 <LL_RCC_HSI_IsReady>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f1      	bne.n	8001936 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 80a3 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d076      	beq.n	8001a62 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d046      	beq.n	8001a0e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001980:	f7ff fc55 	bl	800122e <LL_RCC_LSI1_IsReady>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d113      	bne.n	80019b2 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800198a:	f7ff fc2e 	bl	80011ea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800198e:	f7ff f855 	bl	8000a3c <HAL_GetTick>
 8001992:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001996:	f7ff f851 	bl	8000a3c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e20d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80019a8:	f7ff fc41 	bl	800122e <LL_RCC_LSI1_IsReady>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f1      	beq.n	8001996 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80019b2:	f7ff fc4e 	bl	8001252 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff f841 	bl	8000a3c <HAL_GetTick>
 80019ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80019be:	f7ff f83d 	bl	8000a3c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1f9      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80019d0:	f7ff fc61 	bl	8001296 <LL_RCC_LSI2_IsReady>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f1      	beq.n	80019be <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fc6b 	bl	80012ba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80019e4:	f7ff fc12 	bl	800120c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff f828 	bl	8000a3c <HAL_GetTick>
 80019ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80019f0:	f7ff f824 	bl	8000a3c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1e0      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001a02:	f7ff fc14 	bl	800122e <LL_RCC_LSI1_IsReady>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f1      	bne.n	80019f0 <HAL_RCC_OscConfig+0x33c>
 8001a0c:	e051      	b.n	8001ab2 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001a0e:	f7ff fbec 	bl	80011ea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff f813 	bl	8000a3c <HAL_GetTick>
 8001a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001a1a:	f7ff f80f 	bl	8000a3c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1cb      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001a2c:	f7ff fbff 	bl	800122e <LL_RCC_LSI1_IsReady>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f1      	beq.n	8001a1a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001a36:	f7ff fc1d 	bl	8001274 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001a3a:	e00c      	b.n	8001a56 <HAL_RCC_OscConfig+0x3a2>
 8001a3c:	20000004 	.word	0x20000004
 8001a40:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001a44:	f7fe fffa 	bl	8000a3c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1b6      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001a56:	f7ff fc1e 	bl	8001296 <LL_RCC_LSI2_IsReady>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f1      	bne.n	8001a44 <HAL_RCC_OscConfig+0x390>
 8001a60:	e027      	b.n	8001ab2 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001a62:	f7ff fc07 	bl	8001274 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a66:	f7fe ffe9 	bl	8000a3c <HAL_GetTick>
 8001a6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001a6e:	f7fe ffe5 	bl	8000a3c <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e1a1      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001a80:	f7ff fc09 	bl	8001296 <LL_RCC_LSI2_IsReady>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f1      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001a8a:	f7ff fbbf 	bl	800120c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7fe ffd5 	bl	8000a3c <HAL_GetTick>
 8001a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001a96:	f7fe ffd1 	bl	8000a3c <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e18d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001aa8:	f7ff fbc1 	bl	800122e <LL_RCC_LSI1_IsReady>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f1      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d05b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001abe:	4bb5      	ldr	r3, [pc, #724]	; (8001d94 <HAL_RCC_OscConfig+0x6e0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d114      	bne.n	8001af4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001aca:	f7ff fa5f 	bl	8000f8c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7fe ffb5 	bl	8000a3c <HAL_GetTick>
 8001ad2:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7fe ffb1 	bl	8000a3c <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e16d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae8:	4baa      	ldr	r3, [pc, #680]	; (8001d94 <HAL_RCC_OscConfig+0x6e0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d102      	bne.n	8001b02 <HAL_RCC_OscConfig+0x44e>
 8001afc:	f7ff fb1f 	bl	800113e <LL_RCC_LSE_Enable>
 8001b00:	e00c      	b.n	8001b1c <HAL_RCC_OscConfig+0x468>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d104      	bne.n	8001b14 <HAL_RCC_OscConfig+0x460>
 8001b0a:	f7ff fb3a 	bl	8001182 <LL_RCC_LSE_EnableBypass>
 8001b0e:	f7ff fb16 	bl	800113e <LL_RCC_LSE_Enable>
 8001b12:	e003      	b.n	8001b1c <HAL_RCC_OscConfig+0x468>
 8001b14:	f7ff fb24 	bl	8001160 <LL_RCC_LSE_Disable>
 8001b18:	f7ff fb44 	bl	80011a4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d014      	beq.n	8001b4e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7fe ff8a 	bl	8000a3c <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7fe ff86 	bl	8000a3c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e140      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001b42:	f7ff fb40 	bl	80011c6 <LL_RCC_LSE_IsReady>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0ef      	beq.n	8001b2c <HAL_RCC_OscConfig+0x478>
 8001b4c:	e013      	b.n	8001b76 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4e:	f7fe ff75 	bl	8000a3c <HAL_GetTick>
 8001b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001b54:	e00a      	b.n	8001b6c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f7fe ff71 	bl	8000a3c <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e12b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001b6c:	f7ff fb2b 	bl	80011c6 <LL_RCC_LSE_IsReady>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ef      	bne.n	8001b56 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d02c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d014      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b8a:	f7ff faa4 	bl	80010d6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7fe ff55 	bl	8000a3c <HAL_GetTick>
 8001b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b96:	f7fe ff51 	bl	8000a3c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e10d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001ba8:	f7ff fab7 	bl	800111a <LL_RCC_HSI48_IsReady>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f1      	beq.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
 8001bb2:	e013      	b.n	8001bdc <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bb4:	f7ff faa0 	bl	80010f8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7fe ff40 	bl	8000a3c <HAL_GetTick>
 8001bbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc0:	f7fe ff3c 	bl	8000a3c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e0f8      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001bd2:	f7ff faa2 	bl	800111a <LL_RCC_HSI48_IsReady>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f1      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80ee 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be6:	f7ff fc00 	bl	80013ea <LL_RCC_GetSysClkSource>
 8001bea:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	f040 80af 	bne.w	8001d5c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d123      	bne.n	8001c54 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d114      	bne.n	8001c54 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d10d      	bne.n	8001c54 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d05d      	beq.n	8001d10 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d058      	beq.n	8001d0c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0ab      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c6c:	f7ff fc73 	bl	8001556 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c70:	f7fe fee4 	bl	8000a3c <HAL_GetTick>
 8001c74:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c78:	f7fe fee0 	bl	8000a3c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e09c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ef      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <HAL_RCC_OscConfig+0x6e4>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001caa:	4311      	orrs	r1, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cb0:	0212      	lsls	r2, r2, #8
 8001cb2:	4311      	orrs	r1, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cbe:	4311      	orrs	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cce:	f7ff fc33 	bl	8001538 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ce2:	f7fe feab 	bl	8000a3c <HAL_GetTick>
 8001ce6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7fe fea7 	bl	8000a3c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e063      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0ef      	beq.n	8001cea <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d0a:	e05a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e059      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d151      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d1e:	f7ff fc0b 	bl	8001538 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d32:	f7fe fe83 	bl	8000a3c <HAL_GetTick>
 8001d36:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7fe fe7f 	bl	8000a3c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e03b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0ef      	beq.n	8001d3a <HAL_RCC_OscConfig+0x686>
 8001d5a:	e032      	b.n	8001dc2 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d02d      	beq.n	8001dbe <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	f7ff fbf8 	bl	8001556 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d70:	f023 0303 	bic.w	r3, r3, #3
 8001d74:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d80:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d88:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8a:	f7fe fe57 	bl	8000a3c <HAL_GetTick>
 8001d8e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d90:	e00d      	b.n	8001dae <HAL_RCC_OscConfig+0x6fa>
 8001d92:	bf00      	nop
 8001d94:	58000400 	.word	0x58000400
 8001d98:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe fe4e 	bl	8000a3c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1ef      	bne.n	8001d9c <HAL_RCC_OscConfig+0x6e8>
 8001dbc:	e001      	b.n	8001dc2 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3734      	adds	r7, #52	; 0x34
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd90      	pop	{r4, r7, pc}

08001dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e12d      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b98      	ldr	r3, [pc, #608]	; (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d91b      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b95      	ldr	r3, [pc, #596]	; (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0207 	bic.w	r2, r3, #7
 8001df6:	4993      	ldr	r1, [pc, #588]	; (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dfe:	f7fe fe1d 	bl	8000a3c <HAL_GetTick>
 8001e02:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e06:	f7fe fe19 	bl	8000a3c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e111      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e18:	4b8a      	ldr	r3, [pc, #552]	; (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d1ef      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fae3 	bl	8001402 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e3c:	f7fe fdfe 	bl	8000a3c <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e44:	f7fe fdfa 	bl	8000a3c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e0f2      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001e56:	f7ff fbd0 	bl	80015fa <LL_RCC_IsActiveFlag_HPRE>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f1      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d016      	beq.n	8001e9a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fada 	bl	800142a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e76:	f7fe fde1 	bl	8000a3c <HAL_GetTick>
 8001e7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e7e:	f7fe fddd 	bl	8000a3c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0d5      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e90:	f7ff fbc5 	bl	800161e <LL_RCC_IsActiveFlag_C2HPRE>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f1      	beq.n	8001e7e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d016      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fad3 	bl	8001456 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe fdc4 	bl	8000a3c <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001eb8:	f7fe fdc0 	bl	8000a3c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0b8      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001eca:	f7ff fbbb 	bl	8001644 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f1      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d016      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff facd 	bl	8001484 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001eea:	f7fe fda7 	bl	8000a3c <HAL_GetTick>
 8001eee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ef2:	f7fe fda3 	bl	8000a3c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e09b      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f04:	f7ff fbb1 	bl	800166a <LL_RCC_IsActiveFlag_PPRE1>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f1      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d017      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fac3 	bl	80014ac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f26:	f7fe fd89 	bl	8000a3c <HAL_GetTick>
 8001f2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f2e:	f7fe fd85 	bl	8000a3c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e07d      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001f40:	f7ff fba5 	bl	800168e <LL_RCC_IsActiveFlag_PPRE2>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f1      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d043      	beq.n	8001fde <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001f5e:	f7ff f863 	bl	8001028 <LL_RCC_HSE_IsReady>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d11e      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e067      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001f74:	f7ff fafe 	bl	8001574 <LL_RCC_PLL_IsReady>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d113      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e05c      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001f8a:	f7ff f9cb 	bl	8001324 <LL_RCC_MSI_IsReady>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d108      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e051      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001f98:	f7ff f876 	bl	8001088 <LL_RCC_HSI_IsReady>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e04a      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fa09 	bl	80013c2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fd44 	bl	8000a3c <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7fe fd40 	bl	8000a3c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e036      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	f7ff fa0c 	bl	80013ea <LL_RCC_GetSysClkSource>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d1ec      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d21b      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 0207 	bic.w	r2, r3, #7
 8001ff4:	4913      	ldr	r1, [pc, #76]	; (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fd1e 	bl	8000a3c <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	e008      	b.n	8002016 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002004:	f7fe fd1a 	bl	8000a3c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e012      	b.n	800203c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_ClockConfig+0x278>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d1ef      	bne.n	8002004 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002024:	f000 f87e 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002028:	4603      	mov	r3, r0
 800202a:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_RCC_ClockConfig+0x27c>)
 800202c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800202e:	f7fe fd11 	bl	8000a54 <HAL_GetTickPrio>
 8002032:	4603      	mov	r3, r0
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fcb3 	bl	80009a0 <HAL_InitTick>
 800203a:	4603      	mov	r3, r0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	58004000 	.word	0x58004000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002052:	f7ff f9ca 	bl	80013ea <LL_RCC_GetSysClkSource>
 8002056:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10a      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800205e:	f7ff f986 	bl	800136e <LL_RCC_MSI_GetRange>
 8002062:	4603      	mov	r3, r0
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <HAL_RCC_GetSysClockFreq+0xcc>)
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	e04b      	b.n	800210c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b04      	cmp	r3, #4
 8002078:	d102      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_RCC_GetSysClockFreq+0xd0>)
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	e045      	b.n	800210c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b08      	cmp	r3, #8
 8002084:	d10a      	bne.n	800209c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002086:	f7fe ff9f 	bl	8000fc8 <LL_RCC_HSE_IsEnabledDiv2>
 800208a:	4603      	mov	r3, r0
 800208c:	2b01      	cmp	r3, #1
 800208e:	d102      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e03a      	b.n	800210c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e037      	b.n	800210c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800209c:	f7ff faa1 	bl	80015e2 <LL_RCC_PLL_GetMainSource>
 80020a0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d003      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x64>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x6a>
 80020ae:	e00d      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_RCC_GetSysClockFreq+0xd0>)
 80020b2:	60bb      	str	r3, [r7, #8]
        break;
 80020b4:	e015      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80020b6:	f7fe ff87 	bl	8000fc8 <LL_RCC_HSE_IsEnabledDiv2>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d102      	bne.n	80020c6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80020c0:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_RCC_GetSysClockFreq+0xd0>)
 80020c2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80020c4:	e00d      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_RCC_GetSysClockFreq+0xd4>)
 80020c8:	60bb      	str	r3, [r7, #8]
        break;
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80020cc:	f7ff f94f 	bl	800136e <LL_RCC_MSI_GetRange>
 80020d0:	4603      	mov	r3, r0
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	60bb      	str	r3, [r7, #8]
        break;
 80020e0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80020e2:	f7ff fa59 	bl	8001598 <LL_RCC_PLL_GetN>
 80020e6:	4602      	mov	r2, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	fb03 f402 	mul.w	r4, r3, r2
 80020ee:	f7ff fa6c 	bl	80015ca <LL_RCC_PLL_GetDivider>
 80020f2:	4603      	mov	r3, r0
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	3301      	adds	r3, #1
 80020f8:	fbb4 f4f3 	udiv	r4, r4, r3
 80020fc:	f7ff fa59 	bl	80015b2 <LL_RCC_PLL_GetR>
 8002100:	4603      	mov	r3, r0
 8002102:	0f5b      	lsrs	r3, r3, #29
 8002104:	3301      	adds	r3, #1
 8002106:	fbb4 f3f3 	udiv	r3, r4, r3
 800210a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800210c:	68fb      	ldr	r3, [r7, #12]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	bf00      	nop
 8002118:	0800375c 	.word	0x0800375c
 800211c:	00f42400 	.word	0x00f42400
 8002120:	01e84800 	.word	0x01e84800

08002124 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b598      	push	{r3, r4, r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002128:	f7ff ff90 	bl	800204c <HAL_RCC_GetSysClockFreq>
 800212c:	4604      	mov	r4, r0
 800212e:	f7ff f9d1 	bl	80014d4 <LL_RCC_GetAHBPrescaler>
 8002132:	4603      	mov	r3, r0
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	4a03      	ldr	r2, [pc, #12]	; (8002148 <HAL_RCC_GetHCLKFreq+0x24>)
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd98      	pop	{r3, r4, r7, pc}
 8002148:	080036fc 	.word	0x080036fc

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b598      	push	{r3, r4, r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002150:	f7ff ffe8 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002154:	4604      	mov	r4, r0
 8002156:	f7ff f9d7 	bl	8001508 <LL_RCC_GetAPB1Prescaler>
 800215a:	4603      	mov	r3, r0
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd98      	pop	{r3, r4, r7, pc}
 8002174:	0800373c 	.word	0x0800373c

08002178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002178:	b598      	push	{r3, r4, r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800217c:	f7ff ffd2 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002180:	4604      	mov	r4, r0
 8002182:	f7ff f9cd 	bl	8001520 <LL_RCC_GetAPB2Prescaler>
 8002186:	4603      	mov	r3, r0
 8002188:	0adb      	lsrs	r3, r3, #11
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	fa24 f303 	lsr.w	r3, r4, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd98      	pop	{r3, r4, r7, pc}
 80021a0:	0800373c 	.word	0x0800373c

080021a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2bb0      	cmp	r3, #176	; 0xb0
 80021b0:	d903      	bls.n	80021ba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e007      	b.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	4a11      	ldr	r2, [pc, #68]	; (8002208 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80021ca:	f7ff f98f 	bl	80014ec <LL_RCC_GetAHB4Prescaler>
 80021ce:	4603      	mov	r3, r0
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	4a0d      	ldr	r2, [pc, #52]	; (800220c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	0c9c      	lsrs	r4, r3, #18
 80021ee:	f7fe fedd 	bl	8000fac <HAL_PWREx_GetVoltageRange>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4619      	mov	r1, r3
 80021f6:	4620      	mov	r0, r4
 80021f8:	f000 f80c 	bl	8002214 <RCC_SetFlashLatency>
 80021fc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bd90      	pop	{r4, r7, pc}
 8002206:	bf00      	nop
 8002208:	0800375c 	.word	0x0800375c
 800220c:	080036fc 	.word	0x080036fc
 8002210:	431bde83 	.word	0x431bde83

08002214 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b093      	sub	sp, #76	; 0x4c
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <RCC_SetFlashLatency+0xf0>)
 8002220:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800222a:	4a37      	ldr	r2, [pc, #220]	; (8002308 <RCC_SetFlashLatency+0xf4>)
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	ca07      	ldmia	r2, {r0, r1, r2}
 8002232:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002236:	4b35      	ldr	r3, [pc, #212]	; (800230c <RCC_SetFlashLatency+0xf8>)
 8002238:	f107 040c 	add.w	r4, r7, #12
 800223c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800223e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002242:	2300      	movs	r3, #0
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800224c:	d11c      	bne.n	8002288 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800224e:	2300      	movs	r3, #0
 8002250:	643b      	str	r3, [r7, #64]	; 0x40
 8002252:	e015      	b.n	8002280 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800225c:	4413      	add	r3, r2
 800225e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	d808      	bhi.n	800227a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002270:	4413      	add	r3, r2
 8002272:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002276:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002278:	e022      	b.n	80022c0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800227a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227c:	3301      	adds	r3, #1
 800227e:	643b      	str	r3, [r7, #64]	; 0x40
 8002280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002282:	2b03      	cmp	r3, #3
 8002284:	d9e6      	bls.n	8002254 <RCC_SetFlashLatency+0x40>
 8002286:	e01b      	b.n	80022c0 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228c:	e015      	b.n	80022ba <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800228e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002296:	4413      	add	r3, r2
 8002298:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d808      	bhi.n	80022b4 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80022a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80022aa:	4413      	add	r3, r2
 80022ac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80022b0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80022b2:	e005      	b.n	80022c0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80022b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b6:	3301      	adds	r3, #1
 80022b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d9e6      	bls.n	800228e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <RCC_SetFlashLatency+0xfc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 0207 	bic.w	r2, r3, #7
 80022c8:	4911      	ldr	r1, [pc, #68]	; (8002310 <RCC_SetFlashLatency+0xfc>)
 80022ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80022d0:	f7fe fbb4 	bl	8000a3c <HAL_GetTick>
 80022d4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80022d6:	e008      	b.n	80022ea <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022d8:	f7fe fbb0 	bl	8000a3c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e007      	b.n	80022fa <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <RCC_SetFlashLatency+0xfc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1ef      	bne.n	80022d8 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	374c      	adds	r7, #76	; 0x4c
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd90      	pop	{r4, r7, pc}
 8002302:	bf00      	nop
 8002304:	080036d0 	.word	0x080036d0
 8002308:	080036e0 	.word	0x080036e0
 800230c:	080036ec 	.word	0x080036ec
 8002310:	58004000 	.word	0x58004000

08002314 <LL_RCC_LSE_IsEnabled>:
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <LL_RCC_LSE_IsEnabled+0x18>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <LL_RCC_LSE_IsEnabled+0x1a>
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_RCC_LSE_IsReady>:
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800233c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b02      	cmp	r3, #2
 800234a:	d101      	bne.n	8002350 <LL_RCC_LSE_IsReady+0x18>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_RCC_LSE_IsReady+0x1a>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_RCC_SetRFWKPClockSource>:
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_RCC_SetSMPSClockSource>:
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f023 0203 	bic.w	r2, r3, #3
 800239a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_RCC_SetSMPSPrescaler>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	624b      	str	r3, [r1, #36]	; 0x24
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_RCC_SetUSARTClockSource>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f023 0203 	bic.w	r2, r3, #3
 80023ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_RCC_SetLPUARTClockSource>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_RCC_SetI2CClockSource>:
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002448:	43db      	mvns	r3, r3
 800244a:	401a      	ands	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_RCC_SetLPTIMClockSource>:
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002476:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	041b      	lsls	r3, r3, #16
 8002480:	43db      	mvns	r3, r3
 8002482:	401a      	ands	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_RCC_SetSAIClockSource>:
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <LL_RCC_SetRNGClockSource>:
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80024d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80024de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_RCC_SetCLK48ClockSource>:
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800250a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_RCC_SetUSBClockSource>:
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffe3 	bl	80024f6 <LL_RCC_SetCLK48ClockSource>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <LL_RCC_SetADCClockSource>:
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002548:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800254c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_RCC_SetRTCClockSource>:
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_RCC_GetRTCClockSource>:
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_RCC_ForceBackupDomainReset>:
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_RCC_ReleaseBackupDomainReset>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_RCC_PLLSAI1_Enable>:
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002600:	6013      	str	r3, [r2, #0]
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_RCC_PLLSAI1_Disable>:
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800261a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800261e:	6013      	str	r3, [r2, #0]
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_RCC_PLLSAI1_IsReady>:
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800263c:	d101      	bne.n	8002642 <LL_RCC_PLLSAI1_IsReady+0x18>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b088      	sub	sp, #32
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002656:	2300      	movs	r3, #0
 8002658:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800265a:	2300      	movs	r3, #0
 800265c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d034      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002672:	d021      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002674:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002678:	d81b      	bhi.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800267a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800267e:	d01d      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002680:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002684:	d815      	bhi.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800268a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800268e:	d110      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800269a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80026a0:	e00d      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f947 	bl	800293a <RCCEx_PLLSAI1_ConfigNP>
 80026ac:	4603      	mov	r3, r0
 80026ae:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80026b0:	e005      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	77fb      	strb	r3, [r7, #31]
        break;
 80026b6:	e002      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80026b8:	bf00      	nop
 80026ba:	e000      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80026bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026be:	7ffb      	ldrb	r3, [r7, #31]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fee8 	bl	800249e <LL_RCC_SetSAIClockSource>
 80026ce:	e001      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d0:	7ffb      	ldrb	r3, [r7, #31]
 80026d2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d046      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80026e0:	f7ff ff56 	bl	8002590 <LL_RCC_GetRTCClockSource>
 80026e4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d03c      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026f0:	f7fe fc4c 	bl	8000f8c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ff30 	bl	8002564 <LL_RCC_SetRTCClockSource>
 8002704:	e02e      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002710:	f7ff ff4b 	bl	80025aa <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002714:	f7ff ff5a 	bl	80025cc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002730:	f7ff fdf0 	bl	8002314 <LL_RCC_LSE_IsEnabled>
 8002734:	4603      	mov	r3, r0
 8002736:	2b01      	cmp	r3, #1
 8002738:	d114      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800273a:	f7fe f97f 	bl	8000a3c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002740:	e00b      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe f97b 	bl	8000a3c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d902      	bls.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	77fb      	strb	r3, [r7, #31]
              break;
 8002758:	e004      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800275a:	f7ff fded 	bl	8002338 <LL_RCC_LSE_IsReady>
 800275e:	4603      	mov	r3, r0
 8002760:	2b01      	cmp	r3, #1
 8002762:	d1ee      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002764:	7ffb      	ldrb	r3, [r7, #31]
 8002766:	77bb      	strb	r3, [r7, #30]
 8002768:	e001      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276a:	7ffb      	ldrb	r3, [r7, #31]
 800276c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fe2a 	bl	80023d8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fe35 	bl	8002404 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fe5d 	bl	800246a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fe52 	bl	800246a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d004      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fe2a 	bl	8002430 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d004      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fe1f 	bl	8002430 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d022      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fe8d 	bl	8002522 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002810:	d107      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800281c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002820:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800282a:	d10b      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f8dd 	bl	80029f0 <RCCEx_PLLSAI1_ConfigNQ>
 8002836:	4603      	mov	r3, r0
 8002838:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800283a:	7ffb      	ldrb	r3, [r7, #31]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8002840:	7ffb      	ldrb	r3, [r7, #31]
 8002842:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284c:	2b00      	cmp	r3, #0
 800284e:	d02b      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d008      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002862:	d003      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fe2a 	bl	80024ca <LL_RCC_SetRNGClockSource>
 8002876:	e00a      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	2000      	movs	r0, #0
 8002884:	f7ff fe21 	bl	80024ca <LL_RCC_SetRNGClockSource>
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff fe34 	bl	80024f6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002892:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002896:	d107      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d022      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fe3d 	bl	8002538 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c6:	d107      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028e0:	d10b      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3304      	adds	r3, #4
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f8dd 	bl	8002aa6 <RCCEx_PLLSAI1_ConfigNR>
 80028ec:	4603      	mov	r3, r0
 80028ee:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80028f0:	7ffb      	ldrb	r3, [r7, #31]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80028f6:	7ffb      	ldrb	r3, [r7, #31]
 80028f8:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fd26 	bl	800235c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fd45 	bl	80023b0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fd2c 	bl	8002388 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8002930:	7fbb      	ldrb	r3, [r7, #30]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002946:	f7ff fe61 	bl	800260c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800294a:	f7fe f877 	bl	8000a3c <HAL_GetTick>
 800294e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002950:	e009      	b.n	8002966 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002952:	f7fe f873 	bl	8000a3c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d902      	bls.n	8002966 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	73fb      	strb	r3, [r7, #15]
      break;
 8002964:	e004      	b.n	8002970 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002966:	f7ff fe60 	bl	800262a <LL_RCC_PLLSAI1_IsReady>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d137      	bne.n	80029e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298a:	4313      	orrs	r3, r2
 800298c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029a0:	4313      	orrs	r3, r2
 80029a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80029a4:	f7ff fe23 	bl	80025ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7fe f848 	bl	8000a3c <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80029ae:	e009      	b.n	80029c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b0:	f7fe f844 	bl	8000a3c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	73fb      	strb	r3, [r7, #15]
        break;
 80029c2:	e004      	b.n	80029ce <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80029c4:	f7ff fe31 	bl	800262a <LL_RCC_PLLSAI1_IsReady>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d1f0      	bne.n	80029b0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d108      	bne.n	80029e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e2:	4313      	orrs	r3, r2
 80029e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80029fc:	f7ff fe06 	bl	800260c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a00:	f7fe f81c 	bl	8000a3c <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002a06:	e009      	b.n	8002a1c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a08:	f7fe f818 	bl	8000a3c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d902      	bls.n	8002a1c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1a:	e004      	b.n	8002a26 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002a1c:	f7ff fe05 	bl	800262a <LL_RCC_PLLSAI1_IsReady>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d137      	bne.n	8002a9c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a40:	4313      	orrs	r3, r2
 8002a42:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a56:	4313      	orrs	r3, r2
 8002a58:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002a5a:	f7ff fdc8 	bl	80025ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5e:	f7fd ffed 	bl	8000a3c <HAL_GetTick>
 8002a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002a64:	e009      	b.n	8002a7a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a66:	f7fd ffe9 	bl	8000a3c <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d902      	bls.n	8002a7a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	73fb      	strb	r3, [r7, #15]
        break;
 8002a78:	e004      	b.n	8002a84 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002a7a:	f7ff fdd6 	bl	800262a <LL_RCC_PLLSAI1_IsReady>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d1f0      	bne.n	8002a66 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d108      	bne.n	8002a9c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ab2:	f7ff fdab 	bl	800260c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ab6:	f7fd ffc1 	bl	8000a3c <HAL_GetTick>
 8002aba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002abc:	e009      	b.n	8002ad2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002abe:	f7fd ffbd 	bl	8000a3c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d902      	bls.n	8002ad2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad0:	e004      	b.n	8002adc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ad2:	f7ff fdaa 	bl	800262a <LL_RCC_PLLSAI1_IsReady>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f0      	bne.n	8002abe <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d137      	bne.n	8002b52 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af6:	4313      	orrs	r3, r2
 8002af8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002b10:	f7ff fd6d 	bl	80025ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b14:	f7fd ff92 	bl	8000a3c <HAL_GetTick>
 8002b18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b1a:	e009      	b.n	8002b30 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b1c:	f7fd ff8e 	bl	8000a3c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d902      	bls.n	8002b30 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b2e:	e004      	b.n	8002b3a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002b30:	f7ff fd7b 	bl	800262a <LL_RCC_PLLSAI1_IsReady>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d1f0      	bne.n	8002b1c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d108      	bne.n	8002b52 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <LL_RCC_GetUSARTClockSource>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4013      	ands	r3, r2
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_RCC_GetLPUARTClockSource>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4013      	ands	r3, r2
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e042      	b.n	8002c34 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d106      	bne.n	8002bc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7fd fde9 	bl	8000798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2224      	movs	r2, #36	; 0x24
 8002bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f8c2 	bl	8002d68 <UART_SetConfig>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e022      	b.n	8002c34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fabc 	bl	8003174 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fb43 	bl	80032b8 <UART_CheckIdleState>
 8002c32:	4603      	mov	r3, r0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	f040 8083 	bne.w	8002d5e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_UART_Transmit+0x28>
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e07b      	b.n	8002d60 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Transmit+0x3a>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e074      	b.n	8002d60 <HAL_UART_Transmit+0x124>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2221      	movs	r2, #33	; 0x21
 8002c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c8e:	f7fd fed5 	bl	8000a3c <HAL_GetTick>
 8002c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	88fa      	ldrh	r2, [r7, #6]
 8002ca0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cac:	d108      	bne.n	8002cc0 <HAL_UART_Transmit+0x84>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d104      	bne.n	8002cc0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	e003      	b.n	8002cc8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002cd0:	e02c      	b.n	8002d2c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2180      	movs	r1, #128	; 0x80
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fb36 	bl	800334e <UART_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e039      	b.n	8002d60 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	3302      	adds	r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	e007      	b.n	8002d1a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1cc      	bne.n	8002cd2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2140      	movs	r1, #64	; 0x40
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fb03 	bl	800334e <UART_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e006      	b.n	8002d60 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e000      	b.n	8002d60 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
  }
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4ba3      	ldr	r3, [pc, #652]	; (8003020 <UART_SetConfig+0x2b8>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	69f9      	ldr	r1, [r7, #28]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a98      	ldr	r2, [pc, #608]	; (8003024 <UART_SetConfig+0x2bc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002dda:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	69f9      	ldr	r1, [r7, #28]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	f023 010f 	bic.w	r1, r3, #15
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a89      	ldr	r2, [pc, #548]	; (8003028 <UART_SetConfig+0x2c0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d120      	bne.n	8002e4a <UART_SetConfig+0xe2>
 8002e08:	2003      	movs	r0, #3
 8002e0a:	f7ff fea7 	bl	8002b5c <LL_RCC_GetUSARTClockSource>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d817      	bhi.n	8002e44 <UART_SetConfig+0xdc>
 8002e14:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <UART_SetConfig+0xb4>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e39 	.word	0x08002e39
 8002e24:	08002e33 	.word	0x08002e33
 8002e28:	08002e3f 	.word	0x08002e3f
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	76fb      	strb	r3, [r7, #27]
 8002e30:	e038      	b.n	8002ea4 <UART_SetConfig+0x13c>
 8002e32:	2302      	movs	r3, #2
 8002e34:	76fb      	strb	r3, [r7, #27]
 8002e36:	e035      	b.n	8002ea4 <UART_SetConfig+0x13c>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	76fb      	strb	r3, [r7, #27]
 8002e3c:	e032      	b.n	8002ea4 <UART_SetConfig+0x13c>
 8002e3e:	2308      	movs	r3, #8
 8002e40:	76fb      	strb	r3, [r7, #27]
 8002e42:	e02f      	b.n	8002ea4 <UART_SetConfig+0x13c>
 8002e44:	2310      	movs	r3, #16
 8002e46:	76fb      	strb	r3, [r7, #27]
 8002e48:	e02c      	b.n	8002ea4 <UART_SetConfig+0x13c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a75      	ldr	r2, [pc, #468]	; (8003024 <UART_SetConfig+0x2bc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d125      	bne.n	8002ea0 <UART_SetConfig+0x138>
 8002e54:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002e58:	f7ff fe90 	bl	8002b7c <LL_RCC_GetLPUARTClockSource>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e62:	d017      	beq.n	8002e94 <UART_SetConfig+0x12c>
 8002e64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e68:	d817      	bhi.n	8002e9a <UART_SetConfig+0x132>
 8002e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6e:	d00b      	beq.n	8002e88 <UART_SetConfig+0x120>
 8002e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e74:	d811      	bhi.n	8002e9a <UART_SetConfig+0x132>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <UART_SetConfig+0x11a>
 8002e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7e:	d006      	beq.n	8002e8e <UART_SetConfig+0x126>
 8002e80:	e00b      	b.n	8002e9a <UART_SetConfig+0x132>
 8002e82:	2300      	movs	r3, #0
 8002e84:	76fb      	strb	r3, [r7, #27]
 8002e86:	e00d      	b.n	8002ea4 <UART_SetConfig+0x13c>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	76fb      	strb	r3, [r7, #27]
 8002e8c:	e00a      	b.n	8002ea4 <UART_SetConfig+0x13c>
 8002e8e:	2304      	movs	r3, #4
 8002e90:	76fb      	strb	r3, [r7, #27]
 8002e92:	e007      	b.n	8002ea4 <UART_SetConfig+0x13c>
 8002e94:	2308      	movs	r3, #8
 8002e96:	76fb      	strb	r3, [r7, #27]
 8002e98:	e004      	b.n	8002ea4 <UART_SetConfig+0x13c>
 8002e9a:	2310      	movs	r3, #16
 8002e9c:	76fb      	strb	r3, [r7, #27]
 8002e9e:	e001      	b.n	8002ea4 <UART_SetConfig+0x13c>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5e      	ldr	r2, [pc, #376]	; (8003024 <UART_SetConfig+0x2bc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	f040 808b 	bne.w	8002fc6 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002eb0:	7efb      	ldrb	r3, [r7, #27]
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d823      	bhi.n	8002efe <UART_SetConfig+0x196>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <UART_SetConfig+0x154>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002eff 	.word	0x08002eff
 8002ec4:	08002ee9 	.word	0x08002ee9
 8002ec8:	08002eff 	.word	0x08002eff
 8002ecc:	08002eef 	.word	0x08002eef
 8002ed0:	08002eff 	.word	0x08002eff
 8002ed4:	08002eff 	.word	0x08002eff
 8002ed8:	08002eff 	.word	0x08002eff
 8002edc:	08002ef7 	.word	0x08002ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee0:	f7ff f934 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8002ee4:	6178      	str	r0, [r7, #20]
        break;
 8002ee6:	e00f      	b.n	8002f08 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee8:	4b50      	ldr	r3, [pc, #320]	; (800302c <UART_SetConfig+0x2c4>)
 8002eea:	617b      	str	r3, [r7, #20]
        break;
 8002eec:	e00c      	b.n	8002f08 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eee:	f7ff f8ad 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8002ef2:	6178      	str	r0, [r7, #20]
        break;
 8002ef4:	e008      	b.n	8002f08 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002efa:	617b      	str	r3, [r7, #20]
        break;
 8002efc:	e004      	b.n	8002f08 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	76bb      	strb	r3, [r7, #26]
        break;
 8002f06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 811a 	beq.w	8003144 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	4a46      	ldr	r2, [pc, #280]	; (8003030 <UART_SetConfig+0x2c8>)
 8002f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4413      	add	r3, r2
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d305      	bcc.n	8002f40 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d902      	bls.n	8002f46 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	76bb      	strb	r3, [r7, #26]
 8002f44:	e0fe      	b.n	8003144 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	4a37      	ldr	r2, [pc, #220]	; (8003030 <UART_SetConfig+0x2c8>)
 8002f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	f7fd f90d 	bl	800017c <__aeabi_uldivmod>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	020b      	lsls	r3, r1, #8
 8002f74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f78:	0202      	lsls	r2, r0, #8
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	6849      	ldr	r1, [r1, #4]
 8002f7e:	0849      	lsrs	r1, r1, #1
 8002f80:	4608      	mov	r0, r1
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	1814      	adds	r4, r2, r0
 8002f88:	eb43 0501 	adc.w	r5, r3, r1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	461a      	mov	r2, r3
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	4620      	mov	r0, r4
 8002f98:	4629      	mov	r1, r5
 8002f9a:	f7fd f8ef 	bl	800017c <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fac:	d308      	bcc.n	8002fc0 <UART_SetConfig+0x258>
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb4:	d204      	bcs.n	8002fc0 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	e0c1      	b.n	8003144 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	76bb      	strb	r3, [r7, #26]
 8002fc4:	e0be      	b.n	8003144 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fce:	d16a      	bne.n	80030a6 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8002fd0:	7efb      	ldrb	r3, [r7, #27]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	2b07      	cmp	r3, #7
 8002fd6:	d82d      	bhi.n	8003034 <UART_SetConfig+0x2cc>
 8002fd8:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <UART_SetConfig+0x278>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	08003001 	.word	0x08003001
 8002fe4:	08003009 	.word	0x08003009
 8002fe8:	08003035 	.word	0x08003035
 8002fec:	0800300f 	.word	0x0800300f
 8002ff0:	08003035 	.word	0x08003035
 8002ff4:	08003035 	.word	0x08003035
 8002ff8:	08003035 	.word	0x08003035
 8002ffc:	08003017 	.word	0x08003017
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003000:	f7ff f8ba 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 8003004:	6178      	str	r0, [r7, #20]
        break;
 8003006:	e01a      	b.n	800303e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <UART_SetConfig+0x2c4>)
 800300a:	617b      	str	r3, [r7, #20]
        break;
 800300c:	e017      	b.n	800303e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300e:	f7ff f81d 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8003012:	6178      	str	r0, [r7, #20]
        break;
 8003014:	e013      	b.n	800303e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800301a:	617b      	str	r3, [r7, #20]
        break;
 800301c:	e00f      	b.n	800303e <UART_SetConfig+0x2d6>
 800301e:	bf00      	nop
 8003020:	cfff69f3 	.word	0xcfff69f3
 8003024:	40008000 	.word	0x40008000
 8003028:	40013800 	.word	0x40013800
 800302c:	00f42400 	.word	0x00f42400
 8003030:	0800379c 	.word	0x0800379c
      default:
        pclk = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	76bb      	strb	r3, [r7, #26]
        break;
 800303c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d07f      	beq.n	8003144 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	4a48      	ldr	r2, [pc, #288]	; (800316c <UART_SetConfig+0x404>)
 800304a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800304e:	461a      	mov	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fbb3 f3f2 	udiv	r3, r3, r2
 8003056:	005a      	lsls	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	441a      	add	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	b29b      	uxth	r3, r3
 800306a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b0f      	cmp	r3, #15
 8003070:	d916      	bls.n	80030a0 <UART_SetConfig+0x338>
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d212      	bcs.n	80030a0 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f023 030f 	bic.w	r3, r3, #15
 8003082:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	b29a      	uxth	r2, r3
 8003090:	89fb      	ldrh	r3, [r7, #14]
 8003092:	4313      	orrs	r3, r2
 8003094:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	89fa      	ldrh	r2, [r7, #14]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	e051      	b.n	8003144 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	76bb      	strb	r3, [r7, #26]
 80030a4:	e04e      	b.n	8003144 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030a6:	7efb      	ldrb	r3, [r7, #27]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	2b07      	cmp	r3, #7
 80030ac:	d821      	bhi.n	80030f2 <UART_SetConfig+0x38a>
 80030ae:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <UART_SetConfig+0x34c>)
 80030b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b4:	080030d5 	.word	0x080030d5
 80030b8:	080030dd 	.word	0x080030dd
 80030bc:	080030f3 	.word	0x080030f3
 80030c0:	080030e3 	.word	0x080030e3
 80030c4:	080030f3 	.word	0x080030f3
 80030c8:	080030f3 	.word	0x080030f3
 80030cc:	080030f3 	.word	0x080030f3
 80030d0:	080030eb 	.word	0x080030eb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030d4:	f7ff f850 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 80030d8:	6178      	str	r0, [r7, #20]
        break;
 80030da:	e00f      	b.n	80030fc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <UART_SetConfig+0x408>)
 80030de:	617b      	str	r3, [r7, #20]
        break;
 80030e0:	e00c      	b.n	80030fc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e2:	f7fe ffb3 	bl	800204c <HAL_RCC_GetSysClockFreq>
 80030e6:	6178      	str	r0, [r7, #20]
        break;
 80030e8:	e008      	b.n	80030fc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ee:	617b      	str	r3, [r7, #20]
        break;
 80030f0:	e004      	b.n	80030fc <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	76bb      	strb	r3, [r7, #26]
        break;
 80030fa:	bf00      	nop
    }

    if (pclk != 0U)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d020      	beq.n	8003144 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	4a19      	ldr	r2, [pc, #100]	; (800316c <UART_SetConfig+0x404>)
 8003108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310c:	461a      	mov	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	fbb3 f2f2 	udiv	r2, r3, r2
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	441a      	add	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	b29b      	uxth	r3, r3
 8003126:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b0f      	cmp	r3, #15
 800312c:	d908      	bls.n	8003140 <UART_SetConfig+0x3d8>
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d204      	bcs.n	8003140 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	e001      	b.n	8003144 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003160:	7ebb      	ldrb	r3, [r7, #26]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bdb0      	pop	{r4, r5, r7, pc}
 800316a:	bf00      	nop
 800316c:	0800379c 	.word	0x0800379c
 8003170:	00f42400 	.word	0x00f42400

08003174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01a      	beq.n	800328a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003272:	d10a      	bne.n	800328a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af02      	add	r7, sp, #8
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032c8:	f7fd fbb8 	bl	8000a3c <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d10e      	bne.n	80032fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f82f 	bl	800334e <UART_WaitOnFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e025      	b.n	8003346 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b04      	cmp	r3, #4
 8003306:	d10e      	bne.n	8003326 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f819 	bl	800334e <UART_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e00f      	b.n	8003346 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	4613      	mov	r3, r2
 800335c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800335e:	e062      	b.n	8003426 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003366:	d05e      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003368:	f7fd fb68 	bl	8000a3c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	429a      	cmp	r2, r3
 8003376:	d302      	bcc.n	800337e <UART_WaitOnFlagUntilTimeout+0x30>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11d      	bne.n	80033ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800338c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e045      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02e      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d6:	d126      	bne.n	8003426 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e00f      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	429a      	cmp	r2, r3
 8003442:	d08d      	beq.n	8003360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_UARTEx_DisableFifoMode+0x16>
 8003460:	2302      	movs	r3, #2
 8003462:	e027      	b.n	80034b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003492:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e02d      	b.n	8003534 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2224      	movs	r2, #36	; 0x24
 80034e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f84f 	bl	80035b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e02d      	b.n	80035b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f811 	bl	80035b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d108      	bne.n	80035da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80035d8:	e031      	b.n	800363e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80035da:	2308      	movs	r3, #8
 80035dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80035de:	2308      	movs	r3, #8
 80035e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	0e5b      	lsrs	r3, r3, #25
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	0f5b      	lsrs	r3, r3, #29
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003602:	7bbb      	ldrb	r3, [r7, #14]
 8003604:	7b3a      	ldrb	r2, [r7, #12]
 8003606:	4911      	ldr	r1, [pc, #68]	; (800364c <UARTEx_SetNbDataToProcess+0x94>)
 8003608:	5c8a      	ldrb	r2, [r1, r2]
 800360a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800360e:	7b3a      	ldrb	r2, [r7, #12]
 8003610:	490f      	ldr	r1, [pc, #60]	; (8003650 <UARTEx_SetNbDataToProcess+0x98>)
 8003612:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003614:	fb93 f3f2 	sdiv	r3, r3, r2
 8003618:	b29a      	uxth	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	7b7a      	ldrb	r2, [r7, #13]
 8003624:	4909      	ldr	r1, [pc, #36]	; (800364c <UARTEx_SetNbDataToProcess+0x94>)
 8003626:	5c8a      	ldrb	r2, [r1, r2]
 8003628:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800362c:	7b7a      	ldrb	r2, [r7, #13]
 800362e:	4908      	ldr	r1, [pc, #32]	; (8003650 <UARTEx_SetNbDataToProcess+0x98>)
 8003630:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003632:	fb93 f3f2 	sdiv	r3, r3, r2
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	080037b4 	.word	0x080037b4
 8003650:	080037bc 	.word	0x080037bc

08003654 <__libc_init_array>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	4d0d      	ldr	r5, [pc, #52]	; (800368c <__libc_init_array+0x38>)
 8003658:	4c0d      	ldr	r4, [pc, #52]	; (8003690 <__libc_init_array+0x3c>)
 800365a:	1b64      	subs	r4, r4, r5
 800365c:	10a4      	asrs	r4, r4, #2
 800365e:	2600      	movs	r6, #0
 8003660:	42a6      	cmp	r6, r4
 8003662:	d109      	bne.n	8003678 <__libc_init_array+0x24>
 8003664:	4d0b      	ldr	r5, [pc, #44]	; (8003694 <__libc_init_array+0x40>)
 8003666:	4c0c      	ldr	r4, [pc, #48]	; (8003698 <__libc_init_array+0x44>)
 8003668:	f000 f820 	bl	80036ac <_init>
 800366c:	1b64      	subs	r4, r4, r5
 800366e:	10a4      	asrs	r4, r4, #2
 8003670:	2600      	movs	r6, #0
 8003672:	42a6      	cmp	r6, r4
 8003674:	d105      	bne.n	8003682 <__libc_init_array+0x2e>
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	f855 3b04 	ldr.w	r3, [r5], #4
 800367c:	4798      	blx	r3
 800367e:	3601      	adds	r6, #1
 8003680:	e7ee      	b.n	8003660 <__libc_init_array+0xc>
 8003682:	f855 3b04 	ldr.w	r3, [r5], #4
 8003686:	4798      	blx	r3
 8003688:	3601      	adds	r6, #1
 800368a:	e7f2      	b.n	8003672 <__libc_init_array+0x1e>
 800368c:	080037cc 	.word	0x080037cc
 8003690:	080037cc 	.word	0x080037cc
 8003694:	080037cc 	.word	0x080037cc
 8003698:	080037d0 	.word	0x080037d0

0800369c <memset>:
 800369c:	4402      	add	r2, r0
 800369e:	4603      	mov	r3, r0
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d100      	bne.n	80036a6 <memset+0xa>
 80036a4:	4770      	bx	lr
 80036a6:	f803 1b01 	strb.w	r1, [r3], #1
 80036aa:	e7f9      	b.n	80036a0 <memset+0x4>

080036ac <_init>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	bf00      	nop
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr

080036b8 <_fini>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	bf00      	nop
 80036bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036be:	bc08      	pop	{r3}
 80036c0:	469e      	mov	lr, r3
 80036c2:	4770      	bx	lr
